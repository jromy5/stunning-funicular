#
# mailer.conf: example configuration file for mailer.py
# 

[general]

# This is not passed to the shell, so do not use shell metacharacters.
# The command is split around whitespace, so if you want to include
# whitespace in the command, then ### something ###
diff = /usr/bin/diff -p -u -L %(label_from)s -L %(label_to)s %(from)s %(to)s

#
# One delivery method must be chosen. mailer.py will prefer using the
# "mail_command" option. If that option is empty or commented out,
# then it checks whether the "smtp_hostname" option has been
# specified. If neither option is set, then the commit message is
# delivered to stdout.
#

# This command will be invoked with destination addresses on the command
# line, and the message piped into it.
#mail_command = /usr/sbin/sendmail

# This option specifies the hostname for delivery via SMTP
smtp_hostname = 127.0.0.1

#smtp_debug = on

# Set the CIA RPC server
#
# We're using a patched version of svnmailer here, which also allows
# a per group configuration of the rpc server
#cia_rpc_server = http://cia.vc

# --------------------------------------------------------------------------

#
# CONFIGURATION GROUPS
#
# Any section other than [general] or [defaults] are considered to be
# user-defined groups which override values in the [defaults] section.
# These groups are selected using the following two options:
#
#   for_repos
#   for_paths
#
# Both options specify a regular expression. The former is matched against
# the absolute path to the repository the mailer is operating against. The
# second is matched against *every* path (files and dirs) that was modified
# during the commit.
#
# The options specified in the [defaults] section are always selected. The
# presence of a non-matching for_repos has no relevance. Note that you may
# still use a for_repos value to extract useful information (more on this
# later). Any user-defined groups without a for_repos, or which contains
# a matching for_repos will be selected for potential use.
#
# The subset of user-defined groups identified by the repository are further
# refined based on the for_paths option. A group is selected if at least
# one path(*) in the commit matches the for_paths regular expression.
#
# (*) Actually, each path will select just one group. Thus, it is possible
# that one group will match against all paths, while another group matches
# none of the paths, even though its for_paths would make that possible.
#
# Groups are matched in no particular order. Do not depend upon their
# order within this configuration file. The values from [defaults] will
# be used if no group is matched or an option in a group does not override
# the corresponding value from [options].
#
# Generally, a commit email is generated for each group that has been
# selected. The script will try to minimize mails, so it may be possible
# that a single message will be generated to multiple recipients. In
# addition, it is possible for multiple messages per group to be generated,
# based on the various substitutions that are performed (see the following
# section).
#
#
# SUBSTITUTIONS
#
# The regular expressions can use the "named group" syntax to extract
# interesting pieces of the repository or commit path. These named values
# can then be substituted in the option values during mail generation.
#
# For example, let's say that you have a repository with a top-level
# directory named "clients", with several client projects underneath:
#
#   REPOS/
#     clients/
#       gsvn/
#       rapidsvn/
#       winsvn/
#
# The client name can be extracted with a regular expression like:
#
#   for_paths = /clients/(?P<client>[^/]*)($|/)
#
# The substitution is performed using Python's dict-based string
# interpolation syntax:
#
#   to_addr = commits@%(client)s.tigris.org
#
# The %(NAME)s syntax will substitute whatever value for NAME was captured
# in the for_repos and for_paths regular expressions. The set of names
# available is obtained from the following set of regular expressions:
#
#   [defaults].for_repos    (if present)
#   [GROUP].for_repos       (if present in the user-defined group "GROUP")
#   [GROUP].for_paths       (if present in the user-defined group "GROUP")
#
# The names from the regexes later in the list override the earlier names.
# If none of the groups match, but a for_paths is present in [defaults],
# then its extracted names will be available.
#
# Note that each unique set of names for substitution will generate an
# email. In the above example, if a commit modified files in all three
# client subdirectories, then an email will be sent to all three commits@
# mailing lists on tigris.org.
#
#
# SUMMARY
#
# While mailer.py will work to minimize the number of mail messages
# generated, a single commit can potentially generate a large number
# of variants of a commit message. The criteria for generating messages
# is based on:
#
#   groups selected by for_repos
#   groups selected by for_paths
#   unique sets of parameters extracted by the above regular expressions
#

[defaults]

# unless specified otherwise, the groups should only apply to the main repos
for_repos = .*dist

# The prefix for the Subject: header for commits
commit_subject_prefix = svn commit:

# The prefix for the Subject: header for propchange
propchange_subject_prefix = svn propchange:

# The prefix for the Subject: header for lock
lock_subject_prefix = svn lock:

# The prefix for Subject: header for unlock
unlock_subject_prefix = svn unlock:

# The default From: and To: addresses for commit messages
from_addr = %(author)s@apache.org

# send it to infrastructure so they can figure out why it didn't route properly
to_addr = infrastructure-cvs@apache.org

# When set to one of the valid options, the mailer will create a diff
# for the appropriate type of change in the repository.  If this contains
# other words than the valid options (e.g., "none") no diffs will
# be created.  Note that the operation is always mentioned in the
# message header, regardless of this option's value.
# Valid options: add copy delete modify
generate_diffs = add copy modify propchange

#viewcvs_base_url = http://svn.apache.org/viewvc

# svnmailer-specific
# Set a limit of 90k.  Some commit lists are set to 1MB msgsize.  Others to
# 100k.  There is a bit of overhead to this limit though due to MIME-encoding,
# etc.  So, set at 90k for now.
long_mail_action = 90000 split/truncate/50

# allow committers to specify file encodings via properties
apply_charset_property = yes

# don't send quoted-printable mails
mail_transfer_encoding = 8bit

# shorten subject lines after n chars
max_subject_length = 255

# --------------------------------------------------------------------------
#
# APACHE SPECIFIC CONFIGURATION
#

# The root of the repository, inform infrastructure.  Most likely an added
# directory for a new module.
[/]
for_paths = .*
to_addr = infrastructure-cvs@apache.org
# Exclude what [/incubator/PODLING] catches.  (Without this, it would be
# to: infra-cvs,commits@podling.)
# Exclude axis for the same reason.
exclude_paths = (dev|release)/(incubator|axis|freemarker)/(.*)
suppress_if_match = yes

# Abdera
[/abdera]
for_paths = (dev|release)/abdera/(.*)
to_addr = dev@abdera.apache.org

# Ant
[/ant]
for_paths = (dev|release)/ant/(.*)
to_addr = notifications@ant.apache.org

# forrest
[/forrest]
for_paths = (dev|release)/forrest/(.*)
to_addr = svn@forrest.apache.org


# tomcat
[/tomcat]
for_paths = (dev|release)/tomcat/(.*)
to_addr = dev@tomcat.apache.org

# httpcomponents
[/httpcomponents]
for_paths = (dev|release)/httpcomponents/(.*)
to_addr = commits@hc.apache.org

# httpd
[/httpd]
for_paths = (dev|release)/httpd/(.*)
to_addr = cvs@httpd.apache.org

# Perl
[/perl]
for_paths = (dev|release)/perl/(.*)
to_addr = modperl-cvs@perl.apache.org

# Shindig
[/shindig]
for_paths = (dev|release)/shindig/(.*)
to_addr = dev@shindig.apache.org

# lucene.net
[/lucene.net]
for_paths = (dev|release)/lucene.net(.*)
to_addr = commits@lucenenet.apache.org

# Geronimo
[/geronimo]
for_paths = (dev|release)/geronimo/(.*)
to_addr = scm@geronimo.apache.org

# couchdb
[/couchdb]
for_paths = (dev|release)/couchdb/(.*)
to_addr = dev@couchdb.apache.org

# hadoop
[/hadoop]
for_paths = (dev|release)/hadoop/(.*)
to_addr = common-commits@hadoop.apache.org
suppress_if_match = yes

# james
[/james]
for_paths = (dev|release)/james/(.*)
to_addr = server-dev@james.apache.org

# axis/[axis|axis2]/[c|java]

[/axis]
for_paths = (dev|release)/axis/(.*)
to_addr = general@axis.apache.org
suppress_if_match = yes

[/axis/(axis|axis2)/c]
for_paths = (dev|release)/axis/(axis|axis2)/c/(.*)
to_addr = c-commits@axis.apache.org

[/axis/(axis|axis2)/java]
for_paths = (dev|release)/axis/(axis|axis2)/java/(.*)
to_addr = java-commits@axis.apache.org

# Freemarker Podling (has no commits list)
[/freemarker]
for_paths = (dev|release)/freemarker/(.*)
to_addr = notifications@freemarker.apache.org

# LEGACYPODLING
[/incubator/LEGACYPODLING]
for_paths = (dev|release)/incubator/(?P<LEGACYPODLING>(?:|celix|kalumet|easyant|wave||))/(.*)
to_addr = commits@%(LEGACYPODLING)s.apache.org

# PODLING
[/incubator/PODLING]
# at least (?:|streams|onami|marmotta|hdt|helix||)
for_paths = (dev|release)/incubator/(?P<PODLING>[^/]*)/(.*)
to_addr = commits@%(PODLING)s.apache.org
suppress_if_match = yes
# If the list doesn't exist, the patch to svnmailer:_mail.py will have it
# bounce to root@.

# PMC
[/PMC]
for_paths = (dev|release)/(?P<PMC>[^/]*)/(.*)
exclude_paths = (dev|release)/(incubator|ant|axis|couchdb|freemarker|forrest|geronimo|httpcomponents|httpd|james|lucenetnet|shindig|tomcat|META)/(.*)
to_addr = commits@%(PMC)s.apache.org

# ATTIC
[/ATTIC]
for_paths = (dev|release)/(?P<ATTIC>esme)/(.*)
to_addr = general@attic.apache.org

# META - dir for meta sigs
[/META]
for_paths = release/META/(.*)
to_addr = commits@infra.apache.org
suppress_if_match = yes

# zzz - more metadata
[/zzz]
for_paths = release/zzz/(.*)
to_addr = commits@infra.apache.org
suppress_if_match = yes
