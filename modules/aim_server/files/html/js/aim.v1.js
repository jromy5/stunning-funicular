// Generated by CoffeeScript 1.10.0
var API, APIVERSION, HTML, Row, Widget, app, approveQueue, badModal, chMods, cog, denyQueue, dnsid, fetch, findWidget, genColors, get, globArgs, hsl2rgb, isArray, isHash, loadPageWidgets, mailEditor, mailUnsubber, makeDNS, makeMods, messages, mk, newEditor, pMissingComponent, pageID, paragraph, patch, post, projectDetails, projectList, projects, ps_domain, ps_listname, ps_new, ps_podling, ps_project, pubWidget, pubsubEditor, put, queueDetails, queueList, queue_items, quickColors, renderAccountInfo, repoEditor, resetQueue, rowZ, saveMailingList, savePubSub, saveRepository, saveUnsub, sendEmail, sentDNS, sentMailingList, sentPubSub, sentRepository, sentUnsub, set, setupPage, showHideProject, showHideQueue, sortByKey, swi, switchRepoType, theme, toFullscreen, toNormal, txt, unapproveQueue, updateWidgets, userAccount, widgetCache, xdelete;

hsl2rgb = function(h, s, l) {
  var fract, min, sh, sv, switcher, v, vsf;
  h = h % 1;
  if (s > 1) {
    s = 1;
  }
  if (l > 1) {
    l = 1;
  }
  if (l <= 0.5) {
    v = l * (1 + s);
  } else {
    v = l + s - l * s;
  }
  if (v === 0) {
    return {
      r: 0,
      g: 0,
      b: 0
    };
  }
  min = 2 * l - v;
  sv = (v - min) / v;
  sh = (6 * h) % 6;
  switcher = Math.floor(sh);
  fract = sh - switcher;
  vsf = v * sv * fract;
  switch (switcher) {
    case 0:
      return {
        r: v,
        g: min + vsf,
        b: min
      };
    case 1:
      return {
        r: v - vsf,
        g: v,
        b: min
      };
    case 2:
      return {
        r: min,
        g: v,
        b: min + vsf
      };
    case 3:
      return {
        r: min,
        g: v - vsf,
        b: v
      };
    case 4:
      return {
        r: min + vsf,
        g: min,
        b: v
      };
    case 5:
      return {
        r: v,
        g: min,
        b: v - vsf
      };
  }
  return {
    r: 0,
    g: 0,
    b: 0
  };
};

genColors = function(numColors, saturation, lightness, hex) {
  var baseHue, c, cls, h, i, j, ref;
  cls = [];
  baseHue = 1.02;
  if (numColors <= 2) {
    baseHue = 0.65;
  }
  for (i = j = 1, ref = numColors; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
    c = hsl2rgb(baseHue, saturation, lightness);
    while (c.r > 0.8 && c.g > 0.8 && c.b > 0.8) {
      baseHue -= 0.37;
      if (baseHue < 0) {
        baseHue += 1;
      }
      c = hsl2rgb(baseHue, saturation, lightness);
    }
    if (hex) {
      h = "#" + ("00" + (~~(c.r * 255)).toString(16)).slice(-2) + ("00" + (~~(c.g * 255)).toString(16)).slice(-2) + ("00" + (~~(c.b * 255)).toString(16)).slice(-2);
      cls.push(h);
    } else {
      cls.push({
        r: parseInt(c.r * 255),
        g: parseInt(c.g * 255),
        b: parseInt(c.b * 255)
      });
    }
    baseHue -= 0.37;
    if (baseHue < 0) {
      baseHue += 1;
    }
  }
  return cls;
};

quickColors = function(num) {
  var b, c, colors, g, j, pastel, ph, r, ref, x;
  colors = [];
  ph = 0;
  for (x = j = 1, ref = num; 1 <= ref ? j <= ref : j >= ref; x = 1 <= ref ? ++j : --j) {
    r = Math.random();
    g = Math.random();
    b = Math.random();
    pastel = 0.7;
    r = (pastel + r) / 2;
    g = (pastel + g) / 2;
    b = (pastel + b) / 2;
    c = "#" + ("00" + (~~(r * 205)).toString(16)).slice(-2) + ("00" + (~~(g * 205)).toString(16)).slice(-2) + ("00" + (~~(b * 205)).toString(16)).slice(-2);
    colors.push(c);
  }
  return colors;
};

badModal = function(str) {
  var btn, btndiv, modalBox, modalInner;
  modalBox = new HTML('div', {
    "class": "errorModal"
  });
  document.body.appendChild(modalBox);
  modalInner = new HTML('div', {
    "class": "errorModalInner"
  }, str);
  modalBox.appendChild(modalInner);
  btndiv = new HTML('div', {
    style: {
      textAlign: "center",
      marginTop: "10px"
    }
  }, " ");
  modalInner.inject(btndiv);
  btn = new HTML('button', {
    "class": "btn btn-lg btn-success",
    onclick: "document.body.removeChild(this.parentNode.parentNode.parentNode);"
  }, "Gotcha!");
  btndiv.inject(btn);
  return window.setTimeout(function() {
    modalInner.style.visibility = "visible";
    return modalInner.style.opacity = 1;
  }, 10);
};

API = 2;

Number.prototype.pretty = function(fix) {
  if (fix) {
    return String(this.toFixed(fix)).replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
  }
  return String(this.toFixed(0)).replace(/(\d)(?=(\d{3})+$)/g, '$1,');
};

fetch = function(url, xstate, callback, nocreds) {
  var xmlHttp;
  xmlHttp = null;
  if (window.XMLHttpRequest) {
    xmlHttp = new XMLHttpRequest();
  } else {
    xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
  }
  if (!nocreds) {
    xmlHttp.withCredentials = true;
  }
  xmlHttp.open("GET", "api/" + url, true);
  xmlHttp.send(null);
  return xmlHttp.onreadystatechange = function(state) {
    var e, error, js, response;
    if (xmlHttp.readyState === 4 && xmlHttp.status === 500) {
      if (snap) {
        snap(xstate);
      }
      return;
    }
    if (xmlHttp.readyState === 4 && xmlHttp.status >= 400) {
      js = JSON.parse(xmlHttp.responseText);
      badModal(js.reason);
      return;
    }
    if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
      if (callback) {
        try {
          response = JSON.parse(xmlHttp.responseText);
          return callback(response, xstate);
        } catch (error) {
          e = error;
          return callback(JSON.parse(xmlHttp.responseText), xstate);
        }
      }
    }
  };
};

put = function(url, json, xstate, callback, nocreds) {
  var xmlHttp;
  if (nocreds == null) {
    nocreds = false;
  }
  xmlHttp = null;
  if (window.XMLHttpRequest) {
    xmlHttp = new XMLHttpRequest();
  } else {
    xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
  }
  if (!nocreds) {
    xmlHttp.withCredentials = true;
  }
  xmlHttp.open("PUT", "api/" + url, true);
  xmlHttp.send(JSON.stringify(json || {}));
  return xmlHttp.onreadystatechange = function(state) {
    var e, error, js, response;
    if (xmlHttp.readyState === 4 && xmlHttp.status === 500) {
      if (snap) {
        snap(xstate);
      }
      return;
    }
    if (xmlHttp.readyState === 4 && xmlHttp.status >= 400) {
      js = JSON.parse(xmlHttp.responseText);
      badModal(js.reason);
      return;
    }
    if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
      if (callback) {
        try {
          response = JSON.parse(xmlHttp.responseText);
          if (response && response.loginRequired) {
            location.href = "/login.html";
            return;
          }
          return callback(response, xstate);
        } catch (error) {
          e = error;
          return callback(JSON.parse(xmlHttp.responseText), xstate);
        }
      }
    }
  };
};

patch = function(url, json, xstate, callback, nocreds) {
  var xmlHttp;
  if (nocreds == null) {
    nocreds = false;
  }
  xmlHttp = null;
  if (window.XMLHttpRequest) {
    xmlHttp = new XMLHttpRequest();
  } else {
    xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
  }
  if (!nocreds) {
    xmlHttp.withCredentials = true;
  }
  xmlHttp.open("PATCH", "api/" + url, true);
  xmlHttp.send(JSON.stringify(json || {}));
  return xmlHttp.onreadystatechange = function(state) {
    var e, error, js, response;
    if (xmlHttp.readyState === 4 && xmlHttp.status === 500) {
      if (snap) {
        snap(xstate);
      }
      return;
    }
    if (xmlHttp.readyState === 4 && xmlHttp.status >= 400) {
      js = JSON.parse(xmlHttp.responseText);
      badModal(js.reason);
      return;
    }
    if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
      if (callback) {
        try {
          response = JSON.parse(xmlHttp.responseText);
          if (response && response.loginRequired) {
            location.href = "/login.html";
            return;
          }
          return callback(response, xstate);
        } catch (error) {
          e = error;
          return callback(JSON.parse(xmlHttp.responseText), xstate);
        }
      }
    }
  };
};

xdelete = function(url, json, xstate, callback, nocreds) {
  var xmlHttp;
  if (nocreds == null) {
    nocreds = false;
  }
  xmlHttp = null;
  if (window.XMLHttpRequest) {
    xmlHttp = new XMLHttpRequest();
  } else {
    xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
  }
  if (!nocreds) {
    xmlHttp.withCredentials = true;
  }
  xmlHttp.open("DELETE", "api/" + url, true);
  xmlHttp.send(JSON.stringify(json || {}));
  return xmlHttp.onreadystatechange = function(state) {
    var e, error, js, response;
    if (xmlHttp.readyState === 4 && xmlHttp.status === 500) {
      if (snap) {
        snap(xstate);
      }
      return;
    }
    if (xmlHttp.readyState === 4 && xmlHttp.status >= 400) {
      js = JSON.parse(xmlHttp.responseText);
      badModal(js.reason);
      return;
    }
    if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
      if (callback) {
        try {
          response = JSON.parse(xmlHttp.responseText);
          if (response && response.loginRequired) {
            location.href = "/login.html";
            return;
          }
          return callback(response, xstate);
        } catch (error) {
          e = error;
          return callback(JSON.parse(xmlHttp.responseText), xstate);
        }
      }
    }
  };
};

post = function(url, json, xstate, callback, snap) {
  var fdata, key, val, xmlHttp;
  xmlHttp = null;
  if (window.XMLHttpRequest) {
    xmlHttp = new XMLHttpRequest();
  } else {
    xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
  }
  xmlHttp.withCredentials = true;
  for (key in json) {
    val = json[key];
    if (val.match) {
      if (val.match(/^\d+$/)) {
        json[key] = parseInt(val);
      }
      if (val === 'true') {
        json[key] = true;
      }
      if (val === 'false') {
        json[key] = false;
      }
    }
  }
  fdata = JSON.stringify(json);
  xmlHttp.open("POST", "api/" + url, true);
  xmlHttp.setRequestHeader("Content-type", "application/json");
  xmlHttp.send(fdata);
  return xmlHttp.onreadystatechange = function(state) {
    var e, error, js, response;
    if (xmlHttp.readyState === 4 && xmlHttp.status >= 400) {
      js = JSON.parse(xmlHttp.responseText);
      badModal(js.reason);
      return;
    }
    if (xmlHttp.readyState === 4 && xmlHttp.status === 500) {
      if (snap) {
        snap(xstate);
      }
    }
    if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
      if (callback) {
        try {
          response = JSON.parse(xmlHttp.responseText);
          if (xstate && xstate.widget) {
            xstate.widget.json = response;
          }
          return callback(response, xstate);
        } catch (error) {
          e = error;
          return callback(JSON.parse(xmlHttp.responseText), xstate);
        }
      }
    }
  };
};

mk = function(t, s, tt) {
  var j, k, len, r, v;
  r = document.createElement(t);
  if (s) {
    for (k in s) {
      v = s[k];
      if (v) {
        r.setAttribute(k, v);
      }
    }
  }
  if (tt) {
    if (typeof tt === "string") {
      app(r, txt(tt));
    } else {
      if (isArray(tt)) {
        for (j = 0, len = tt.length; j < len; j++) {
          k = tt[j];
          if (typeof k === "string") {
            app(r, txt(k));
          } else {
            app(r, k);
          }
        }
      } else {
        app(r, tt);
      }
    }
  }
  return r;
};

app = function(a, b) {
  var item, j, len, results;
  if (isArray(b)) {
    results = [];
    for (j = 0, len = b.length; j < len; j++) {
      item = b[j];
      if (typeof item === "string") {
        item = txt(item);
      }
      results.push(a.appendChild(item));
    }
    return results;
  } else {
    return a.appendChild(b);
  }
};

set = function(a, b, c) {
  return a.setAttribute(b, c);
};

txt = function(a) {
  return document.createTextNode(a);
};

get = function(a) {
  return document.getElementById(a);
};

swi = function(obj) {
  var switchery;
  return switchery = new Switchery(obj, {
    color: '#26B99A'
  });
};

cog = function(div, size) {
  var i, idiv;
  if (size == null) {
    size = 200;
  }
  idiv = document.createElement('div');
  idiv.setAttribute("class", "icon");
  idiv.setAttribute("style", "text-align: center; vertical-align: middle; height: 500px;");
  i = document.createElement('i');
  i.setAttribute("class", "fa fa-spin fa-cog");
  i.setAttribute("style", "font-size: " + size + "pt !important; color: #AAB;");
  idiv.appendChild(i);
  idiv.appendChild(document.createElement('br'));
  idiv.appendChild(document.createTextNode('Loading, hang on tight..!'));
  div.innerHTML = "";
  return div.appendChild(idiv);
};

globArgs = {};

theme = {
  color: [],
  title: {
    itemGap: 8,
    textStyle: {
      fontWeight: 'normal',
      color: '#408829'
    }
  },
  dataRange: {
    color: ['#1f610a', '#97b58d']
  },
  toolbox: {
    color: ['#408829', '#408829', '#408829', '#408829']
  },
  tooltip: {
    backgroundColor: 'rgba(0,0,0,0.5)',
    axisPointer: {
      type: 'line',
      lineStyle: {
        color: '#408829',
        type: 'dashed'
      },
      crossStyle: {
        color: '#408829'
      },
      shadowStyle: {
        color: 'rgba(200,200,200,0.3)'
      }
    }
  },
  dataZoom: {
    dataBackgroundColor: '#eee',
    fillerColor: 'rgba(64,136,41,0.2)',
    handleColor: '#408829'
  },
  grid: {
    borderWidth: 0
  },
  categoryAxis: {
    axisLine: {
      lineStyle: {
        color: '#408829'
      }
    },
    splitLine: {
      lineStyle: {
        color: ['#eee']
      }
    }
  },
  valueAxis: {
    axisLine: {
      lineStyle: {
        color: '#408829'
      }
    },
    splitArea: {
      show: true,
      areaStyle: {
        color: ['rgba(250,250,250,0.1)', 'rgba(200,200,200,0.1)']
      }
    },
    splitLine: {
      lineStyle: {
        color: ['#eee']
      }
    }
  },
  timeline: {
    lineStyle: {
      color: '#408829'
    },
    controlStyle: {
      normal: {
        color: '#408829'
      },
      emphasis: {
        color: '#408829'
      }
    }
  },
  k: {
    itemStyle: {
      normal: {
        color: '#68a54a',
        color0: '#a9cba2',
        lineStyle: {
          width: 1,
          color: '#408829',
          color0: '#86b379'
        }
      }
    }
  },
  map: {
    itemStyle: {
      normal: {
        areaStyle: {
          color: '#ddd'
        },
        label: {
          textStyle: {
            color: '#c12e34'
          }
        }
      },
      emphasis: {
        areaStyle: {
          color: '#99d2dd'
        },
        label: {
          textStyle: {
            color: '#c12e34'
          }
        }
      }
    }
  },
  force: {
    itemStyle: {
      normal: {
        linkStyle: {
          strokeColor: '#408829'
        }
      }
    }
  },
  chord: {
    padding: 4,
    itemStyle: {
      normal: {
        lineStyle: {
          width: 1,
          color: 'rgba(128, 128, 128, 0.5)'
        },
        chordStyle: {
          lineStyle: {
            width: 1,
            color: 'rgba(128, 128, 128, 0.5)'
          }
        }
      },
      emphasis: {
        lineStyle: {
          width: 1,
          color: 'rgba(128, 128, 128, 0.5)'
        },
        chordStyle: {
          lineStyle: {
            width: 1,
            color: 'rgba(128, 128, 128, 0.5)'
          }
        }
      }
    }
  },
  gauge: {
    startAngle: 225,
    endAngle: -45,
    axisLine: {
      show: true,
      lineStyle: {
        color: [[0.2, '#86b379'], [0.8, '#68a54a'], [1, '#408829']],
        width: 8
      }
    },
    axisTick: {
      splitNumber: 10,
      length: 12,
      lineStyle: {
        color: 'auto'
      }
    },
    axisLabel: {
      textStyle: {
        color: 'auto'
      }
    },
    splitLine: {
      length: 18,
      lineStyle: {
        color: 'auto'
      }
    },
    pointer: {
      length: '90%',
      color: 'auto'
    },
    title: {
      textStyle: {
        color: '#333'
      }
    },
    detail: {
      textStyle: {
        color: 'auto'
      }
    }
  },
  textStyle: {
    fontFamily: 'Arial, Verdana, sans-serif'
  }
};

isArray = function(value) {
  return value && typeof value === 'object' && value instanceof Array && typeof value.length === 'number' && typeof value.splice === 'function' && !(value.propertyIsEnumerable('length'));
};


/* isHash: function to detect if an object is a hash */

isHash = function(value) {
  return value && typeof value === 'object' && !isArray(value);
};

HTML = (function() {
  function HTML(type, params, children) {

    /* create the raw element, or clone if passed an existing element */
    var child, j, key, len, subkey, subval, val;
    if (typeof type === 'object') {
      this.element = type.cloneNode();
    } else {
      this.element = document.createElement(type);
    }

    /* If params have been passed, set them */
    if (isHash(params)) {
      for (key in params) {
        val = params[key];

        /* Standard string value? */
        if (typeof val === "string" || typeof val === 'number') {
          this.element.setAttribute(key, val);
        } else if (isArray(val)) {

          /* Are we passing a list of data to set? concatenate then */
          this.element.setAttribute(key, val.join(" "));
        } else if (isHash(val)) {

          /* Are we trying to set multiple sub elements, like a style? */
          for (subkey in val) {
            subval = val[subkey];
            if (!this.element[key]) {
              throw "No such attribute, " + key + "!";
            }
            this.element[key][subkey] = subval;
          }
        }
      }
    }

    /* If any children have been passed, add them to the element */
    if (children) {

      /* If string, convert to textNode using txt() */
      if (typeof children === "string") {
        this.element.inject(txt(children));
      } else {

        /* If children is an array of elems, iterate and add */
        if (isArray(children)) {
          for (j = 0, len = children.length; j < len; j++) {
            child = children[j];

            /* String? Convert via txt() then */
            if (typeof child === "string") {
              this.element.inject(txt(child));
            } else {

              /* Plain element, add normally */
              this.element.inject(child);
            }
          }
        } else {

          /* Just a single element, add it */
          this.element.inject(children);
        }
      }
    }
    return this.element;
  }

  return HTML;

})();


/**
 * prototype injector for HTML elements:
 * Example: mydiv.inject(otherdiv)
 */

HTMLElement.prototype.inject = function(child) {
  var item, j, len;
  if (isArray(child)) {
    for (j = 0, len = child.length; j < len; j++) {
      item = child[j];
      if (typeof item === 'string') {
        item = txt(item);
      }
      this.appendChild(item);
    }
  } else {
    if (typeof child === 'string') {
      child = txt(child);
    }
    this.appendChild(child);
  }
  return child;
};

sortByKey = function(array, key) {
  return array.sort(function(a, b) {
    if (a[key] < b[key]) {
      return -1;
    } else if (a[key] > b[key]) {
      return 1;
    } else {
      return 0;
    }
  });
};

userAccount = {
  foundation: "public"
};

pageID = 0;

APIVERSION = 3;

setupPage = function(json, state) {
  var a, child, div, j, k, len, p, r, ref, results, row, v, vrow, widget;
  $('#placeholder').remove();
  if (json.error) {
    div = document.getElementById('innercontents');
    div.style.textAlign = 'center';
    div.innerHTML = "<a style='color: #D44; font-size: 100pt;'><i class='fa fa-warning'></i></a><br/><h3>An error occurred:</h3><p style='font-size: 12pt;'>" + json.error + "</p>";
    return;
  }
  if (userAccount.view && userAccount.view.length > 0) {
    vrow = new Row();
    p = mk('p');
    p.style.background = "#EEF";
    p.style.fontSize = "11pt";
    p.style.fontStyle = 'italic';
    p.style.color = "#222";
    app(p, txt("You are currently using a view to filter out sources. "));
    a = mk('a');
    app(a, txt("Click here to deactivate it"));
    set(a, 'href', 'javascript:void(activateview(null, location.href));');
    app(p, a);
    app(p, txt(" or "));
    a = mk('a');
    app(a, txt("Click here to manage views"));
    set(a, 'href', '?page=views');
    app(p, a);
    vrow.inject(p);
  }
  document.title = json.title + " - Apache Infrastructure Management";
  ref = json.rows;
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    row = new Row();
    results.push((function() {
      var len1, n, ref1, ref2, ref3, ref4, results1;
      ref1 = r.children;
      results1 = [];
      for (n = 0, len1 = ref1.length; n < len1; n++) {
        child = ref1[n];
        widget = new Widget(child.blocks || 3, child);
        if (state.gargs) {
          widget.args.eargs = widget.args.eargs || {};
          ref2 = state.gargs;
          for (k in ref2) {
            v = ref2[k];
            widget.args.eargs[k] = v;
          }
        }
        widget.parent = row;
        row.inject(widget);
        if (child.eargs) {
          ref3 = child.eargs;
          for (k in ref3) {
            v = ref3[k];
            widget.args.eargs[k] = v;
          }
        }
        if ((ref4 = child.type) !== 'views' && ref4 !== 'sourcelist') {
          widget.args.eargs.quick = 'true';
        }
        switch (child.type) {
          case 'projects':
            results1.push(widget.load(projectList));
            break;
          case 'queue':
            results1.push(widget.load(queueList));
            break;
          case 'pubsubeditor':
            results1.push(widget.load(pubsubEditor));
            break;
          case 'maileditor':
            results1.push(widget.load(mailEditor));
            break;
          case 'mailunsub':
            results1.push(widget.load(mailUnsubber));
            break;
          case 'repoeditor':
            results1.push(widget.load(repoEditor));
            break;
          case 'neweditor':
            results1.push(widget.load(newEditor));
            break;
          default:
            results1.push(void 0);
        }
      }
      return results1;
    })());
  }
  return results;
};

loadPageWidgets = function(page, apiVersion) {
  var col, i, idiv, m, ph;
  if (!page) {
    page = window.location.search.substr(1);
  }
  if (apiVersion) {
    APIVERSION = apiVersion;
  }
  ph = document.createElement('div');
  ph.setAttribute("class", "row");
  ph.setAttribute("id", "placeholder");
  col = document.createElement('div');
  col.setAttribute("class", "col-md-12");
  ph.appendChild(col);
  idiv = document.createElement('div');
  idiv.setAttribute("class", "icon");
  idiv.setAttribute("style", "text-align: center; vertical-align: middle; height: 500px;");
  i = document.createElement('i');
  i.setAttribute("class", "fa fa-spin fa-cog");
  i.setAttribute("style", "font-size: 240pt !important; color: #AAB;");
  idiv.appendChild(i);
  idiv.appendChild(document.createElement('br'));
  idiv.appendChild(document.createTextNode('Loading, hang on tight..!'));
  col.appendChild(idiv);
  ph.appendChild(col);
  document.getElementById('innercontents').innerHTML = "";
  document.getElementById('innercontents').appendChild(ph);
  while (page.match(/([^=]+)=([^=&]+)&?/)) {
    m = page.match(/([^=]+)=([^&=]+)&?/);
    if (m) {
      console.log(m[1] + "=" + m[2]);
      globArgs[m[1]] = unescape(m[2]);
      page = page.replace(m[0], '');
    }
  }
  if (globArgs.page) {
    pageID = globArgs.page;
  }
  if (globArgs.view) {
    $("a").each(function() {
      var url;
      url = $(this).attr('href');
      m = url.match(/^(.+\?page=[-a-z]+)(?:&view=[a-f0-9]+)?(.*)$/);
      if (m) {
        if (globArgs.view) {
          return $(this).attr('href', m[1] + "&view=" + globArgs.view + m[2]);
        }
      }
    });
  }
  return fetch('session', null, renderAccountInfo);
};

renderAccountInfo = function(json, state) {
  var div, email, img, img2, j, len, ma, mli, msp, name, name2, nl, nm, ref, ulevel;
  if (json.error) {
    div = document.getElementById('innercontents');
    div.style.textAlign = 'center';
    return div.innerHTML = "<a style='color: #D44; font-size: 100pt;'><i class='fa fa-warning'></i></a><br/><h3>An error occurred:</h3><p style='font-size: 12pt;'>" + json.error + "</p>";
  } else {
    userAccount = json;
    img = document.getElementById('user_image');
    img.setAttribute("src", "https://secure.gravatar.com/avatar/" + json.gravatar + ".png");
    img2 = document.getElementById('user_image2');
    img2.setAttribute("src", "https://secure.gravatar.com/avatar/" + json.gravatar + ".png");
    name = document.getElementById('user_name');
    name.innerHTML = "";
    name.appendChild(document.createTextNode(json.fullName));
    name2 = document.getElementById('user_name2');
    name2.innerHTML = "";
    name2.appendChild(document.createTextNode(json.fullName));
    ulevel = get('user_level');
    ulevel.inject(json.isRoot === true ? 'Administrator' : json.isMember ? 'ASF Member' : 'Committer');
    nm = get('messages_number');
    nm.innerHTML = json.messages || 0;
    if (json.messages > 0) {
      nm.setAttribute("class", "badge bg-green");
      nl = get('messages_list');
      ref = json.messages_headers;
      for (j = 0, len = ref.length; j < len; j++) {
        email = ref[j];
        mli = mk('li');
        ma = mk('a');
        set(ma, 'href', '?page=messages&message=' + email.id);
        msp = mk('span');
        set(msp, 'class', 'image');
        img = mk('img');
        set(img, 'src', 'https://secure.gravatar.com/avatar/' + email.gravatar + ".png?d=identicon");
        app(msp, img);
        app(ma, msp);
        msp = mk('span');
        app(msp, txt(email.senderName));
        app(ma, msp);
        msp = mk('span');
        set(msp, 'class', 'message');
        app(msp, txt(email.subject));
        app(ma, msp);
        app(mli, ma);
        app(nl, mli);
      }
    }
    return fetch('widgets/' + pageID, {
      gargs: globArgs
    }, setupPage);
  }
};

widgetCache = [];

findWidget = function(id) {
  var j, len, w;
  for (j = 0, len = widgetCache.length; j < len; j++) {
    w = widgetCache[j];
    if (w.id === id) {
      return w;
    }
  }
  return null;
};

toFullscreen = function(id) {
  var CW, FSA, dobrk, ic, j, len, node, nxt, obj, ref, w;
  obj = get(id);
  FSA = get('FS_' + id);
  FSA.innerHTML = "Pop back";
  FSA.setAttribute("onclick", "toNormal('" + id + "');");
  CW = get('CW_' + id);
  CW.setAttribute("onclick", "toNormal('" + id + "');");
  w = findWidget(id);
  w.parent = obj.parentNode;
  w.sibling = null;
  nxt = null;
  dobrk = false;
  ref = w.parent.childNodes;
  for (j = 0, len = ref.length; j < len; j++) {
    node = ref[j];
    if (dobrk) {
      nxt = node;
      break;
    } else if (node === obj) {
      dobrk = true;
    }
  }
  w.sibling = nxt;
  ic = get('innercontents');
  app(ic, obj);
  w.oldStyle = JSON.stringify(obj.style);
  obj.style.width = "100%";
  obj.style.height = "90%";
  obj.style.background = "#EEE";
  obj.style.position = "absolute";
  obj.style.top = "10px";
  obj.style.left = "10px";
  obj.style.zIndex = "2000";
  w.fullscreen = true;
  w.reload(true);
  $("html, body").animate({
    scrollTop: 0
  }, "fast");
  return true;
};

toNormal = function(id) {
  var CW, FSA, obj, w;
  obj = get(id);
  w = findWidget(id);
  FSA = get('FS_' + id);
  FSA.innerHTML = "Fullscreen";
  FSA.setAttribute("onclick", "toFullscreen('" + id + "');");
  CW = get('CW_' + id);
  CW.setAttribute("onclick", "findWidget('" + id + "').kill();");
  if (w.sibling) {
    w.parent.insertBefore(obj, w.sibling);
  } else {
    app(w.parent, obj);
  }
  obj.style = JSON.parse(w.oldStyle);
  w.fullscreen = false;
  w.reload(true);
  return true;
};

updateWidgets = function(type, target, eargs) {
  var g, gargs, j, k, len, results, v, wargs, widget, wloc;
  wargs = window.location.search;
  wloc = "";
  for (k in eargs) {
    v = eargs[k];
    globArgs[k] = v;
    g = [];
    for (k in globArgs) {
      v = globArgs[k];
      if (k && v) {
        g.push(k + '=' + v);
      }
    }
    gargs = "?" + g.join("&");
    wloc = window.location.pathname + gargs;
  }
  if (wargs !== gargs) {
    window.history.pushState({}, "", wloc);
    console.log("pushed state " + wloc);
    window.onpopstate = function(event) {
      return loadPageWidgets();
    };
  }
  results = [];
  for (j = 0, len = widgetCache.length; j < len; j++) {
    widget = widgetCache[j];
    if (type === widget.args.type) {
      widget.args.target = target && target || widget.args.target;
      if (eargs) {
        widget.args.eargs = widget.args.eargs && widget.args.eargs || {};
        for (k in eargs) {
          v = eargs[k];
          widget.args.eargs[k] = v;
          if (!v) {
            delete widget.args.eargs[k];
          }
        }
      }
      switch (widget.args.type) {
        case 'donut':
          results.push(widget.load(donut));
          break;
        case 'gauge':
          results.push(widget.load(gauge));
          break;
        case 'radar':
          results.push(widget.load(radar));
          break;
        case 'paragraph':
          results.push(widget.load(paragraph));
          break;
        case 'line':
          results.push(widget.load(linechart));
          break;
        case 'top5':
          results.push(widget.load(top5));
          break;
        case 'factors':
          results.push(widget.load(factors));
          break;
        case 'trends':
          results.push(widget.load(trend));
          break;
        case 'preferences':
          results.push(widget.load(preferences));
          break;
        case 'messages':
          results.push(widget.load(messages));
          break;
        case 'widget':
          results.push(widget.load(publisher));
          break;
        case 'contacts':
          results.push(fetchPhonebook({
            widget: widget,
            w: w,
            letter: 'a',
            project: target
          }));
          break;
        case 'repopicker':
          results.push(widget.load(explorer));
          break;
        case 'sourcepicker':
          results.push(widget.load(sourceexplorer));
          break;
        case 'issuepicker':
          results.push(widget.load(issueexplorer));
          break;
        case 'viewpicker':
          results.push(widget.load(viewexplorer));
          break;
        case 'mailpicker':
          results.push(widget.load(mailexplorer));
          break;
        case 'logpicker':
          results.push(widget.load(logexplorer));
          break;
        case 'relationship':
          results.push(widget.load(relationship));
          break;
        case 'treemap':
          results.push(widget.load(treemap));
          break;
        case 'report':
          results.push(widget.load(report));
          break;
        case 'mvp':
          results.push(widget.load(mvp));
          break;
        case 'comstat':
          results.push(widget.load(comstat));
          break;
        case 'worldmap':
          results.push(widget.load(worldmap));
          break;
        default:
          results.push(void 0);
      }
    } else {
      results.push(void 0);
    }
  }
  return results;
};

pubWidget = (function() {
  function pubWidget(div1, wid, config) {
    this.div = div1;
    this.wid = wid;
    this.config = config;
    this.args = {};
    fetch("publish/id=" + this.wid, {
      config: this.config,
      widget: this,
      args: {}
    }, publisherPublic, null, true);
  }

  pubWidget.prototype.inject = function(el, clear) {
    if (clear) {
      this.div.innerHTML = "";
    }
    return this.div.appendChild(el);
  };

  return pubWidget;

})();

Widget = (function() {
  function Widget(blocks, args, pub) {
    var cldiv, t, tt;
    this.blocks = blocks;
    this.args = args;
    this.id = Math.floor(Math.random() * 1000000).toString(16);
    this.div = document.createElement('div');
    this.div.setAttribute("id", this.id);
    this.div.setAttribute("class", "x_panel snoot_widget");
    this.div.style.float = 'left';
    this.json = {};
    if (this.blocks <= 2) {
      this.div.setAttribute("class", "snoot_widget col-md-2 col-sm-4 col-xs-12");
    } else if (this.blocks <= 3) {
      this.div.setAttribute("class", "snoot_widget col-md-3 col-sm-6 col-xs-12");
    } else if (this.blocks <= 4) {
      this.div.setAttribute("class", "snoot_widget col-md-4 col-sm-8 col-xs-12");
    } else if (this.blocks <= 6) {
      this.div.setAttribute("class", "snoot_widget col-md-6 col-sm-12 col-xs-12");
    } else if (this.blocks <= 9) {
      this.div.setAttribute("class", "snoot_widget col-md-9 col-sm-12 col-xs-12");
    } else {
      this.div.setAttribute("class", "snoot_widget col-md-12 col-sm-12 col-xs-12");
    }
    if (!pub) {
      t = document.createElement('div');
      t.setAttribute("class", "x_title");
      tt = document.createElement('h2');
      tt.style.fontSize = "17pt";
      tt.appendChild(document.createTextNode(this.args.name));
      t.appendChild(tt);
      this.div.appendChild(t);
      cldiv = document.createElement('div');
      cldiv.setAttribute("classs", "clearfix");
      this.div.appendChild(cldiv);
    }
    this.cdiv = document.createElement('div');
    this.cdiv.style.width = "100%";
    this.cdiv.setAttribute("id", "contents_" + this.id);
    this.cdiv.setAttribute("class", "x_content");
    this.div.appendChild(this.cdiv);
    widgetCache.push(this);
  }

  Widget.prototype.cog = function(size) {
    var i, idiv;
    if (size == null) {
      size = 100;
    }
    idiv = document.createElement('div');
    idiv.setAttribute("class", "icon");
    idiv.setAttribute("style", "text-align: center; vertical-align: middle; height: 500px;");
    i = new HTML('div', {
      "class": "spinwheel"
    }, new HTML('div', {
      "class": "spinwheel_md"
    }, new HTML('div', {
      "class": "spinwheel_sm"
    })));
    idiv.appendChild(i);
    idiv.appendChild(document.createElement('br'));
    idiv.appendChild(document.createTextNode('Loading, hang on tight..!'));
    this.cdiv.innerHTML = "";
    return this.cdiv.appendChild(idiv);
  };

  Widget.prototype.kill = function() {
    return this.div.parentNode.removeChild(this.div);
  };

  Widget.prototype.inject = function(object, clear) {
    if (clear) {
      this.cdiv.innerHTML = "";
      this.cdiv.style.textAlign = 'left';
    }
    return this.cdiv.appendChild(object);
  };

  Widget.prototype.snap = function(state) {
    state.widget.cdiv.innerHTML = "<a style='color: #D44; font-size: 100pt;'><i class='fa fa-warning'></i></a><br/>Oh snap, something went wrong!";
    return state.widget.cdiv.style.textAlign = 'center';
  };

  Widget.prototype.load = function(callback) {
    var js, url;
    this.cog();
    this.callback = callback;
    js = this.args.eargs;
    url = this.args.source;
    if (this.args.type === 'paragraph') {
      return this.callback(this.args, {
        widget: this,
        eargs: this.args.eargs
      });
    } else {
      return post(url, js, {
        widget: this,
        eargs: this.args.eargs
      }, callback, this.snap);
    }
  };

  Widget.prototype.reload = function(fakeit) {
    var js, url;
    this.cog();
    js = this.args.eargs;
    url = this.args.source;
    if (fakeit && this.json) {
      return this.callback(this.json, {
        widget: this,
        eargs: this.args.eargs
      });
    } else {
      return post(url, js, {
        widget: this,
        eargs: this.args.eargs
      }, this.callback, this.snap);
    }
  };

  return Widget;

})();

rowZ = 100;

Row = (function() {
  function Row() {
    this.id = Math.floor(Math.random() * 987654321).toString(16);
    this.div = document.createElement('div');
    this.div.setAttribute("class", "row");
    this.div.style.zIndex = rowZ;
    rowZ--;
    this.div.setAttribute("id", this.id);
    this.cdiv = document.createElement('div');
    this.cdiv.setAttribute("class", "col-md-12");
    this.cdiv.setAttribute("id", "contents_" + this.id);
    this.div.appendChild(this.cdiv);
    document.getElementById('innercontents').appendChild(this.div);
  }

  Row.prototype.inject = function(object, clear) {
    if (clear) {
      this.cdiv.innerHTML = "";
    }
    if (object instanceof Widget) {
      return this.cdiv.appendChild(object.div);
    } else {
      return this.cdiv.appendChild(object);
    }
  };

  return Row;

})();

ps_domain = '';

ps_project = '';

ps_listname = '';

ps_new = false;

saveMailingList = function() {
  var payload, ps_changes, ps_moderators, ps_modunsubbed, ps_por, ps_private, ps_trailer;
  if (ps_new) {
    ps_listname = get('mailinglist_listname').value + "@" + ps_domain;
  }
  ps_moderators = get('mailinglist_moderators').value.split(/\r?\n/);
  ps_por = get('mailinglist_por').value;
  ps_private = get('poption').checked;
  ps_modunsubbed = get('moption').checked;
  ps_trailer = get('toption').checked;
  ps_changes = {
    'listname': ps_listname,
    'project': ps_project,
    'moderators': ps_moderators,
    'private': ps_private,
    'modunsubed': ps_modunsubbed,
    'trailer': ps_trailer,
    'action': 'modify'
  };
  payload = {
    'project': ps_project,
    'por': ps_por,
    'type': 'mailinglist',
    'payload': ps_changes
  };
  return put('queue/list/add', payload, null, sentMailingList);
};

chMods = function(add, remove) {
  var j, len, mod, mods, xmods;
  if (add === '' && !remove) {
    return;
  }
  mods = get('mailinglist_moderators').value.split(/\r?\n/);
  if (add) {
    mods.push(add);
  }
  if (remove) {
    xmods = [];
    for (j = 0, len = mods.length; j < len; j++) {
      mod = mods[j];
      if (mod !== remove && mod !== '') {
        xmods.push(mod);
      }
    }
    mods = xmods;
  }
  get('mailinglist_moderators').value = mods.join("\n");
  return makeMods();
};

makeMods = function() {
  var j, len, m, mdiv, mod, moderators, t, w, x;
  if (get('mailinglist_moderators')) {
    moderators = get('mailinglist_moderators').value.split(/\r?\n/);
    mdiv = get('mod_div');
    mdiv.innerHTML = '';
    for (j = 0, len = moderators.length; j < len; j++) {
      mod = moderators[j];
      if (mod !== '') {
        w = new HTML('div', {
          style: {
            float: 'left'
          }
        });
        m = new HTML('span', {
          "class": 'tagvalue'
        }, mod);
        x = new HTML('span', {
          "class": 'tagcross',
          onclick: "chMods(null, '" + mod + "');"
        }, 'X');
        w.inject(m);
        w.inject(x);
        mdiv.inject(w);
      }
    }
    t = new HTML('input', {
      type: 'text',
      "class": 'tagtext',
      placeholder: 'Type to add',
      onblur: 'chMods(this.value);'
    });
    mdiv.inject(t);
    return t.focus();
  }
};

saveUnsub = function() {
  var payload, ps_changes, ps_method, ps_por, ps_target;
  ps_target = get('mailinglist_target').value;
  ps_method = get('mailinglist_method').value;
  ps_por = get('mailinglist_unsub_por').value;
  ps_changes = {
    'listname': ps_listname,
    'project': ps_project,
    'action': ps_method,
    'target': ps_target
  };
  payload = {
    'project': ps_project,
    'por': ps_por,
    'type': 'mail-unsub',
    'payload': ps_changes
  };
  return put('queue/list/add', payload, null, sentUnsub);
};

sentMailingList = function(json, state) {
  return get('mailinglist_form').innerHTML = "<h2>Your request (" + json.id + ") has been filed!</h2>";
};

sentUnsub = function(json, state) {
  return get('mailinglist_unsub_form').innerHTML = "<h2>Your request (" + json.id + ") has been filed!</h2>";
};

mailEditor = function(json, state) {
  var btn, d, key, moption, poption, ref, tbl, td, tr, xvalue;
  ps_new = false;
  ps_listname = json.listname + "@" + json.domain;
  ps_domain = json.domain;
  ps_project = json.project;
  tbl = new HTML('table', {
    id: 'mailinglist_form',
    "class": 'table table-striped'
  });
  d = new HTML('div');
  d.inject(new HTML('p', {}, "This page allows you to create or modify mailing list settings for your project."));
  d.inject(new HTML('p', {}, "Once your request has been filed, and approved by Infrastructure, it will take approximately 30 minutes to be processed and applied."));
  state.widget.inject(d, true);
  if (!json.type) {
    d.inject(new HTML('b', {}, "There doesn't seem to be any configuration for this list yet, but you can request a setup using the form below:"));
    ps_new = true;
    json = {
      'type': 'mailinglist',
      'source': '',
      'domain': json.domain,
      'project': json.project,
      'modunsubbed': true,
      'listname': 'NEW',
      'moderators': []
    };
  }
  if (json.domain && json.listname) {
    json.por = 'Put some reason or a vote link here';
    tr = new HTML('tr');
    tr.inject(new HTML('th', {}, "Configuration"));
    tr.inject(new HTML('th', {}, "Value"));
    tbl.inject(tr);
    key = "Project";
    tr = new HTML('tr');
    tr.inject(new HTML('td', {}, key));
    tr.inject(new HTML('td', {}, json.project));
    tbl.inject(tr);
    key = "List name";
    xvalue = [
      new HTML('input', {
        id: 'mailinglist_listname',
        readonly: (json.listname !== 'NEW' ? 'readonly' : null),
        type: 'text',
        value: (json.listname !== 'NEW' ? json.listname : 'foo'),
        size: 16,
        placeholder: 'foo@foo.apache.org'
      }), '@' + json.domain
    ];
    tr = new HTML('tr');
    tr.inject(new HTML('td', {}, key));
    tr.inject(new HTML('td', {}, xvalue));
    tbl.inject(tr);
    key = "Moderators";
    xvalue = [
      new HTML('textarea', {
        id: 'mailinglist_moderators',
        style: {
          display: 'none',
          width: '400px',
          height: '120px'
        },
        placeholder: "Email addresses, one per line."
      }, json.moderators.join("\n"))
    ];
    xvalue.push(new HTML('div', {
      id: 'mod_div',
      style: {
        lineHeight: '30px',
        maxWidth: '640px'
      }
    }));
    tr = new HTML('tr');
    tr.inject(new HTML('td', {}, key));
    tr.inject(new HTML('td', {}, xvalue));
    tbl.inject(tr);
    key = "Mailing list options";
    xvalue = [];
    poption = new HTML('div');
    poption.inject(new HTML('input', {
      id: 'poption',
      type: 'checkbox',
      value: 'yes',
      checked: (((ref = json.listname) === 'private' || ref === 'security') || json["private"] ? 'checked' : null)
    }));
    poption.inject(new HTML('label', {
      "for": 'poption',
      style: {
        marginLeft: '8px'
      }
    }, "Private list (private archive, subscribers moderated). "));
    poption.inject(new HTML('span', {}, " NOTE: private@ as well as security@ will always be private. All other lists SHOULD be public."));
    xvalue.push(poption);
    moption = new HTML('div');
    moption.inject(new HTML('input', {
      id: 'moption',
      type: 'checkbox',
      value: 'yes',
      checked: json.modunsubbed ? 'checked' : null
    }));
    moption.inject(new HTML('label', {
      "for": 'moption',
      style: {
        marginLeft: '8px'
      }
    }, "Moderate emails from unsubscribed senders"));
    xvalue.push(moption);
    poption = new HTML('div');
    poption.inject(new HTML('input', {
      id: 'toption',
      type: 'checkbox',
      value: 'yes',
      checked: json.trailer ? 'checked' : null
    }));
    poption.inject(new HTML('label', {
      "for": 'toption',
      style: {
        marginLeft: '8px'
      }
    }, "Add unsubscribe trailer to emails"));
    xvalue.push(poption);
    tr = new HTML('tr');
    tr.inject(new HTML('td', {}, key));
    tr.inject(new HTML('td', {}, xvalue));
    tbl.inject(tr);
    key = 'Proof-of-Request';
    xvalue = new HTML('textarea', {
      id: 'mailinglist_por',
      style: {
        width: '400px',
        height: '120px'
      },
      placeholder: "Put a reason for the request, e.g. a link to a vote email thread or explain it's a new podling etc. This will be used to assess the validity of the request."
    });
    tr = new HTML('tr');
    tr.inject(new HTML('td', {}, key));
    tr.inject(new HTML('td', {}, xvalue));
    tbl.inject(tr);
    tr = new HTML('tr');
    td = new HTML('td', {
      colspan: 2
    });
    btn = new HTML('input', {
      type: 'button',
      "class": 'btn btn-success',
      onclick: 'saveMailingList();',
      value: 'Save and request changes'
    });
    td.inject(btn);
    tr.inject(td);
    tbl.inject(tr);
  } else {
    badModal("We can't find this mailing list. Please contact infra!");
  }
  state.widget.inject(tbl);
  return makeMods();
};

mailUnsubber = function(json, state) {
  var btn, d, key, tbl, td, tr, xvalue;
  ps_listname = json.listname + "@" + json.domain;
  ps_project = json.project;
  tbl = new HTML('table', {
    id: 'mailinglist_unsub_form',
    "class": 'table table-striped'
  });
  d = new HTML('div');
  state.widget.inject(d, true);
  if (json.domain && json.listname) {
    json.por = 'Put some reason or a vote link here';
    key = "Target email address";
    xvalue = new HTML('input', {
      id: 'mailinglist_target',
      type: 'text',
      value: "",
      size: 64,
      placeholder: 'foo@example.org'
    });
    tr = new HTML('tr');
    tr.inject(new HTML('td', {}, key));
    tr.inject(new HTML('td', {}, xvalue));
    tbl.inject(tr);
    key = "Method";
    xvalue = new HTML('select', {
      id: 'mailinglist_method'
    });
    xvalue.inject(new HTML('option', {
      value: 'unsub'
    }, "Just unsubscribe the user, don't ban"));
    xvalue.inject(new HTML('option', {
      value: 'ban'
    }, "Unsubscribe and ban (prevent from re-subscribing)"));
    tr = new HTML('tr');
    tr.inject(new HTML('td', {}, key));
    tr.inject(new HTML('td', {}, xvalue));
    tbl.inject(tr);
    key = 'Proof-of-Request';
    xvalue = new HTML('textarea', {
      id: 'mailinglist_unsub_por',
      style: {
        width: '400px',
        height: '120px'
      },
      placeholder: "Put a reason for the request, e.g. a link to a vote email thread or explain it's a new podling etc. This will be used to assess the validity of the request."
    });
    tr = new HTML('tr');
    tr.inject(new HTML('td', {}, key));
    tr.inject(new HTML('td', {}, xvalue));
    tbl.inject(tr);
    tr = new HTML('tr');
    td = new HTML('td', {
      colspan: 2
    });
    btn = new HTML('input', {
      type: 'button',
      "class": 'btn btn-success',
      onclick: 'saveUnsub();',
      value: 'Request unsubscription'
    });
    td.inject(btn);
    tr.inject(td);
    tbl.inject(tr);
  }
  return state.widget.inject(tbl, true);
};

messages = function(json, state) {
  var a, b, btn, div, el, form, h2, inp, item, items, j, len, len1, len2, len3, message, n, o, obj, pre, q, ref, ref1, ref2, reply, tbl, tbody, td, thead, tr;
  if (isArray(json)) {
    obj = document.createElement('form');
    tbl = mk('table');
    set(tbl, 'class', 'table table-striped');
    thead = mk('thead');
    tr = mk('tr');
    ref = ['Date', 'Sender', 'Subject'];
    for (j = 0, len = ref.length; j < len; j++) {
      el = ref[j];
      td = mk('th');
      if (el.match(/(Date|Sender)/)) {
        td.style.width = "20%";
      }
      app(td, txt(el));
      app(tr, td);
    }
    app(thead, tr);
    app(tbl, thead);
    tbody = mk('tbody');
    app(tbl, tbody);
    for (n = 0, len1 = json.length; n < len1; n++) {
      message = json[n];
      tr = mk('tr');
      if (message.read === false) {
        tr.style.fontWeight = "bold";
        tr.style.color = "#396";
      }
      td = mk('td');
      a = mk('a');
      set(a, 'href', '?page=messages&message=' + message.id);
      app(a, txt(new Date(message.epoch * 1000).toString()));
      app(td, a);
      app(tr, td);
      td = mk('td');
      a = mk('a');
      set(a, 'href', '?page=messages&message=' + message.id);
      app(a, txt(message.senderName));
      app(td, a);
      app(tr, td);
      td = mk('td');
      a = mk('a');
      set(a, 'href', '?page=messages&message=' + message.id);
      app(a, txt(message.subject));
      app(td, a);
      app(tr, td);
      app(tbody, tr);
    }
    app(obj, tbl);
    items = {
      recipient: 'Recipient ID',
      subject: "Message subject",
      body: "Message"
    };
    h2 = mk('h2');
    app(h2, txt("Send a message:"));
    app(obj, h2);
    ref1 = ['recipient', 'subject', 'body'];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      item = ref1[o];
      div = mk('div');
      app(div, txt(items[item] + ": "));
      if (item === 'body') {
        inp = mk('textarea');
        inp.style.width = "600px";
        inp.style.height = "200px";
      } else {
        inp = mk('input');
        set(inp, 'type', 'text');
        inp.style.width = "200px";
      }
      set(inp, 'name', item);
      app(div, inp);
      app(obj, div);
    }
    btn = mk('input');
    set(btn, 'type', 'button');
    set(btn, 'onclick', 'sendEmail(this.form)');
    set(btn, 'value', "Send message");
    app(obj, btn);
    return state.widget.inject(obj, true);
  } else {
    obj = mk('div');
    b = mk('b');
    app(b, txt("Sender: "));
    app(obj, b);
    app(obj, txt(json.senderName + ' (' + json.sender + ')'));
    app(obj, mk('br'));
    b = mk('b');
    app(b, txt("Date: "));
    app(obj, b);
    app(obj, txt(new Date(json.epoch * 1000).toString()));
    app(obj, mk('br'));
    b = mk('b');
    app(b, txt("Subject: "));
    app(obj, b);
    app(obj, txt(json.subject));
    app(obj, mk('br'));
    app(obj, mk('br'));
    pre = mk('pre');
    app(pre, txt(json.body));
    app(obj, pre);
    app(obj, mk('hr'));
    form = mk('form');
    items = {
      recipient: 'Recipient ID',
      subject: "Message subject",
      body: "Message"
    };
    h2 = mk('h2');
    app(h2, txt("Send a reply:"));
    app(form, h2);
    reply = {
      recipient: json.sender,
      subject: 'RE: ' + json.subject,
      body: ''
    };
    ref2 = ['recipient', 'subject', 'body'];
    for (q = 0, len3 = ref2.length; q < len3; q++) {
      item = ref2[q];
      div = mk('div');
      app(div, txt(items[item] + ": "));
      if (item === 'body') {
        inp = mk('textarea');
        inp.style.width = "600px";
        inp.style.height = "200px";
      } else {
        inp = mk('input');
        set(inp, 'type', 'text');
        inp.style.width = "200px";
      }
      inp.value = reply[item];
      set(inp, 'name', item);
      app(div, inp);
      app(form, div);
    }
    btn = mk('input');
    set(btn, 'type', 'button');
    set(btn, 'onclick', 'sendEmail(this.form)');
    set(btn, 'value', "Send message");
    app(form, btn);
    app(obj, form);
    return state.widget.inject(obj, true);
  }
};

sendEmail = function(form) {
  var i, j, js, k, ref, v;
  js = {
    action: 'send'
  };
  for (i = j = 0, ref = form.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
    k = form[i].name;
    v = form[i].value;
    if (k === 'recipient' || k === 'subject' || k === 'body') {
      js[k] = v;
    }
  }
  return postJSON("messages", js, null, function(a) {
    return alert("Mail sent!");
  });
};

newEditor = function(json, state) {
  var item, j, len, ref, tbl, td, tr;
  tbl = new HTML('table', {
    "class": 'table table-striped'
  });
  if (json.pmcs && json.pmcs.length > 0) {
    tr = new HTML('tr');
    tr.inject(new HTML('th', {}, "Project ID"));
    tr.inject(new HTML('th', {}, "Project domain"));
    tr.inject(new HTML('th', {}, "Project Status"));
    tbl.inject(tr);
    sortByKey(json.pmcs, 'id');
    ref = json.pmcs;
    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];
      projects[item.id] = item;
      tr = new HTML('tr', {
        "class": 'hovertr',
        onclick: "showHideProject('" + item.id + "')"
      });
      if (item.error) {
        tr.style.background = '#F0D0C0';
        tr.style.color = '#803000';
      }
      tr.inject(new HTML('td', {}, item.id));
      tr.inject(new HTML('td', {}, item.domain));
      tr.inject(new HTML('td', {}, item.podling ? 'Podling' : 'Top Level Project'));
      tbl.inject(tr);
      tr = new HTML('tr', {
        id: "project_" + item.id,
        style: {
          display: 'none'
        }
      });
      td = new HTML('td', {
        colspan: 7
      }, "foooo");
      tr.inject(td);
      tbl.inject(tr);
    }
  } else {
    tbl.inject(txt("You are not on any PMCs"));
  }
  state.widget.inject(txt("Click on a project to view resources assigned to it and perform actions."), true);
  return state.widget.inject(tbl);
};

paragraph = function(json, state) {
  var j, len, lmain, p, para, ref, results, title;
  lmain = mk('div');
  state.widget.parent.inject(lmain, true);
  if (json.title) {
    title = mk('h1', {}, json.title);
    app(lmain, title);
  }
  if (json.text) {
    if (isArray(json.text)) {
      ref = json.text;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        para = mk('p', {
          style: "font-size: 1.2rem;"
        }, p);
        results.push(app(lmain, para));
      }
      return results;
    } else {
      return app(lmain, mk('p', {
        style: "font-size: 1.2rem;"
      }, json.text));
    }
  }
};

projects = {};

dnsid = '';

makeDNS = function(project, domain) {
  var payload;
  dnsid = project;
  payload = {
    'project': project,
    'type': 'dns',
    'payload': {
      'domain': domain
    }
  };
  return put('queue/list/add', payload, null, sentDNS);
};

sentDNS = function(json, state) {
  get("dns_" + dnsid).setAttribute('onclick', 'javascript:void(0);');
  get("dns_" + dnsid).setAttribute("class", 'btn btn-warning');
  return get("dns_" + dnsid).innerText = 'Request filed!';
};

showHideProject = function(id) {
  var obj;
  obj = get('project_' + id);
  if (obj) {
    if (obj.style.display === 'none') {
      obj.style.display = 'table-row';
      return projectDetails(obj, id);
    } else {
      return obj.style.display = 'none';
    }
  }
};

projectDetails = function(obj, id) {
  var details, html, idtxt, item, k, l, li, mlno, ref, ref1, ref2, ref3, repno, ul, v;
  item = projects[id];
  idtxt = id;
  if (item.podling) {
    idtxt += " (podling)";
  }
  html = new HTML('td', {
    colspan: 7
  });
  html.inject(new HTML('h2', {
    style: {
      textAlign: 'center'
    }
  }, idtxt + ":"));
  html.inject(new HTML('br'));
  html.inject(new HTML('hr'));
  html.inject(new HTML('h4', {}, 'DNS record:'));
  if (item.dns) {
    html.inject("The domain, " + item.domain + ", exists in DNS");
  } else {
    html.inject("The domain, " + item.domain + ", does not appear to exist in DNS yet. ");
    html.inject(new HTML('a', {
      id: "dns_" + id,
      "class": 'btn btn-success',
      onclick: "makeDNS('" + id + "', '" + item.domain + "');"
    }, "Set up DNS"));
  }
  html.inject(new HTML('br'));
  html.inject(new HTML('hr'));
  html.inject(new HTML('h4', {}, 'Web site publishing:'));
  if (item.pubsub) {
    if (item.pubsub.type === 'git') {
      html.inject("The web site at ");
      html.inject(new HTML('a', {
        href: "https://" + item.domain
      }, item.domain));
      html.inject(" is served via gitpubsub from ");
      html.inject(new HTML('a', {
        href: item.pubsub.source
      }, item.pubsub.source));
      html.inject(" - ");
      html.inject(new HTML('a', {
        "class": 'btn btn-slim btn-warning',
        href: "?page=pubsub-modify&domain=" + item.domain
      }, "Details/modify"));
    }
    if (item.pubsub.type === 'svn') {
      html.inject("The web site at ");
      html.inject(new HTML('a', {
        href: item.domain
      }, item.domain));
      if (item.pubsub.source.search('websites/production') !== -1) {
        html.inject(" is served via the ASF CMS system from ");
      } else {
        html.inject(" is served via svnpubsub from ");
      }
      html.inject(new HTML('a', {
        href: item.pubsub.source
      }, item.pubsub.source));
      html.inject(" - ");
      html.inject(new HTML('a', {
        "class": 'btn btn-slim btn-warning',
        href: "?page=pubsub-modify&domain=" + item.domain
      }, "Details/modify"));
    }
    html.inject(new HTML('br'));
  } else {
    html.inject("There doesn't appear to be any pubsub configuration for " + item.domain + " yet.");
    html.inject(" - ");
    html.inject(new HTML('a', {
      "class": 'btn btn-success',
      href: "?page=pubsub-new&domain=" + item.domain
    }, "Set up pubsub"));
    html.inject(new HTML('br'));
  }
  html.inject(new HTML('hr'));
  html.inject(new HTML('h4', {}, 'Mailing lists:'));
  if (item.mailinglists) {
    mlno = 0;
    ref = item.mailinglists;
    for (k in ref) {
      v = ref[k];
      mlno++;
    }
    html.inject("This project has " + mlno + " mailing lists:");
    ul = new HTML('ul');
    ref1 = item.mailinglists;
    for (l in ref1) {
      details = ref1[l];
      li = new HTML('li', {
        title: "Moderators: " + details.moderators.join(", ")
      }, l + "@" + item.domain + " (" + details.moderators.length + " moderators, " + details.subscribers + " subscribers) - ");
      li.inject(new HTML('a', {
        "class": 'btn btn-slim btn-warning',
        href: "?page=mail-modify&ml=" + l + "@" + item.domain
      }, "Details/modify"));
      ul.inject(li);
    }
    html.inject(ul);
  }
  if (item.dns) {
    html.inject(new HTML('a', {
      "class": 'btn btn-success',
      href: "?page=mail-new&ml=NEW@" + item.domain
    }, "Create a new mailing list"));
  } else {
    html.inject("You'll need to create a DNS record before you can set up mailing lists.");
  }
  html.inject(new HTML('hr'));
  html.inject(new HTML('h4', {}, 'Source code repositories:'));
  if (item.repositories) {
    repno = 0;
    ref2 = item.repositories;
    for (k in ref2) {
      v = ref2[k];
      repno++;
    }
    html.inject("This project has " + repno + " source code repositores:");
    ul = new HTML('ul');
    ref3 = item.repositories;
    for (l in ref3) {
      details = ref3[l];
      li = new HTML('li', {}, new HTML('a', {
        href: details.url,
        target: '_blank'
      }, details.url));
      li.inject(new HTML('a', {
        "class": 'btn btn-slim btn-warning',
        href: "?page=repo-modify&project=" + id + "&repo=" + details.repository
      }, "Modify"));
      ul.inject(li);
    }
    html.inject(ul);
  }
  if (mlno > 0) {
    html.inject(new HTML('a', {
      "class": 'btn btn-success',
      href: "?page=repo-new&project=" + id
    }, "Create a new repository"));
  } else {
    html.inject("You'll need to create mailing lists before you can set up repositories.");
  }
  obj.innerHTML = "";
  return obj.inject(html);
};

pMissingComponent = function(item) {
  if (!item.dns) {
    return "This project has no DNS record set yet.";
  }
  if (!item.mailinglists || item.mailinglists.length === 0) {
    return "This project has no mailing lists yet";
  }
  return null;
};

projectList = function(json, state) {
  var item, j, len, ref, tbl, td, tr, w;
  tbl = new HTML('table', {
    "class": 'table table-striped'
  });
  if (json.pmcs && json.pmcs.length > 0) {
    tr = new HTML('tr');
    tr.inject(new HTML('th', {}, "Project ID"));
    tr.inject(new HTML('th', {}, "Project domain"));
    tr.inject(new HTML('th', {}, "Project Status"));
    tbl.inject(tr);
    sortByKey(json.pmcs, 'id');
    ref = json.pmcs;
    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];
      projects[item.id] = item;
      tr = new HTML('tr', {
        "class": 'hovertr',
        onclick: "showHideProject('" + item.id + "')"
      });
      w = pMissingComponent(item);
      if (w) {
        tr.style.background = '#F0D0C0';
        tr.style.color = '#604000';
        tr.setAttribute("title", w);
      }
      if (item.error) {
        tr.style.background = '#F0D0C0';
        tr.style.color = '#803000';
      }
      tr.inject(new HTML('td', {}, item.id));
      tr.inject(new HTML('td', {}, item.domain));
      tr.inject(new HTML('td', {}, item.podling ? 'Podling' : 'Top Level Project'));
      tbl.inject(tr);
      tr = new HTML('tr', {
        id: "project_" + item.id,
        style: {
          display: 'none'
        }
      });
      td = new HTML('td', {
        colspan: 7
      }, "foooo");
      tr.inject(td);
      tbl.inject(tr);
    }
  } else {
    tbl.inject(txt("You are not on any PMCs"));
  }
  state.widget.inject(txt("Click on a project to view resources assigned to it and perform actions."), true);
  return state.widget.inject(tbl);
};

ps_domain = '';

ps_project = '';

savePubSub = function() {
  var payload, ps_changes, ps_por, ps_source, ps_type;
  ps_type = get('pubsub_type').value;
  ps_por = get('pubsub_por').value;
  ps_source = get('pubsub_source').value;
  ps_changes = {
    'domain': ps_domain,
    'project': ps_project,
    'type': ps_type,
    'source': ps_source
  };
  payload = {
    'project': ps_project,
    'por': ps_por,
    'type': 'pubsub',
    'payload': ps_changes
  };
  return put('queue/list/add', payload, null, sentPubSub);
};

sentPubSub = function() {
  return get('pubsub_form').innerHTML = "<h2>Your request has been filed!</h2>";
};

pubsubEditor = function(json, state) {
  var btn, d, key, tbl, td, tr, value, xvalue;
  tbl = new HTML('table', {
    id: 'pubsub_form',
    "class": 'table table-striped'
  });
  d = new HTML('div');
  d.inject(new HTML('p', {}, "This page allows you to create or modify the publisher/subscriber settings for your project's web site."));
  d.inject(new HTML('p', {}, "Once your request has been filed, and approved by Infrastructure, it will take approximately 30 minutes to be processed and applied."));
  d.inject(new HTML('p', {}, "Note that we only accept official ASF repos on svn.apache.org, git-wip.apache.org and gitbox.apache.org"));
  state.widget.inject(d, true);
  if (!json.type) {
    d.inject(new HTML('b', {}, "There doesn't seem to be any pubsub configuration for this domain yet, but you can request a setup using the form below:"));
    json = {
      'type': 'git',
      'source': '',
      'domain': json.domain,
      'project': json.project
    };
  }
  if (json.type && json.project) {
    ps_domain = json.domain;
    ps_project = json.project;
    json.por = 'Put some reason or a vote link here';
    tr = new HTML('tr');
    tr.inject(new HTML('th', {}, "Configuration"));
    tr.inject(new HTML('th', {}, "Value"));
    tbl.inject(tr);
    for (key in json) {
      value = json[key];
      xvalue = value;
      if (key === 'type') {
        xvalue = [
          new HTML('select', {
            'id': 'pubsub_type'
          })
        ];
        xvalue[0].inject(new HTML('option', {
          value: 'git',
          selected: value === 'git' ? 'selected' : null
        }, 'GitPubSub'));
        xvalue[0].inject(new HTML('option', {
          value: 'svn',
          selected: value === 'svn' ? 'selected' : null
        }, 'SVNPubSub'));
        xvalue.push(new HTML('br'));
        xvalue.push("For git repositories, remember that all sites are published using the asf-site branch. This branch MUST be present before you request pubsub setup. The setup procedure will verify this once the request has been approved.");
      }
      if (key === 'source') {
        xvalue = new HTML('input', {
          id: 'pubsub_source',
          type: 'text',
          value: value,
          size: 64,
          placeholder: 'e.g. https://gitbox.apache.org/repos/asf/foo-site.git'
        });
      }
      if (key === 'por') {
        key = 'Proof-of-Request';
        xvalue = new HTML('textarea', {
          id: 'pubsub_por',
          style: {
            width: '400px',
            height: '120px'
          },
          placeholder: "Put a reason for the request, e.g. a link to a vote email thread or explain it's a new podling etc. This will be used to assess the validity of the request."
        });
      }
      tr = new HTML('tr');
      tr.inject(new HTML('td', {}, key));
      tr.inject(new HTML('td', {}, xvalue));
      tbl.inject(tr);
    }
    tr = new HTML('tr');
    td = new HTML('td', {
      colspan: 2
    });
    btn = new HTML('input', {
      type: 'button',
      "class": 'btn btn-success',
      onclick: 'savePubSub();',
      value: 'Save and request changes'
    });
    td.inject(btn);
    tr.inject(td);
    tbl.inject(tr);
  } else {
    badModal("We can't find this sub-domain in LDAP. Please contact infra!");
  }
  return state.widget.inject(tbl);
};

queue_items = {};

showHideQueue = function(id) {
  var obj;
  obj = get('request_' + id);
  if (obj) {
    if (obj.style.display === 'none') {
      obj.style.display = 'table-row';
      return queueDetails(obj, id);
    } else {
      return obj.style.display = 'none';
    }
  }
};

denyQueue = function(id) {
  return patch('queue/list/foo', {
    id: id,
    status: 'denied'
  }, null, function() {
    return location.reload();
  });
};

approveQueue = function(id) {
  return patch('queue/list/foo', {
    id: id,
    status: 'approved'
  }, null, function() {
    return location.reload();
  });
};

unapproveQueue = function(id) {
  return patch('queue/list/foo', {
    id: id,
    status: 'unapproved'
  }, null, function() {
    return location.reload();
  });
};

resetQueue = function(id) {
  return patch('queue/list/foo', {
    id: id,
    status: 'rescheduled'
  }, null, function() {
    return location.reload();
  });
};

queueDetails = function(obj, id) {
  var btn, html, item, ml, por, pre;
  item = queue_items[id];
  html = new HTML('td', {
    colspan: 7
  });
  html.inject(new HTML('h3', {}, "Request " + id + ":"));
  if (item.type === 'dns') {
    html.inject(["This is a request to create ", new HTML('kbd', {}, item.project + ".apache.org"), " via normaltlps.txt"]);
  }
  if (item.type === 'pubsub') {
    html.inject(["This is a request to set up " + item.payload.type + "PubSub for  ", new HTML('kbd', {}, item.payload.domain), ", pointing at ", new HTML('kbd', {}, item.payload.source)]);
  }
  if (item.type === 'mailinglist') {
    if (item.payload.action === 'create') {
      ml = item.payload.listname;
      html.inject(["This is a request to create ", new HTML('kbd', {}, ml), "."]);
    }
    if (item.payload.action === 'modify') {
      ml = item.payload.listname;
      html.inject(["This is a request to modify ", new HTML('kbd', {}, ml), "."]);
    }
  }
  if (item.type === 'mail-unsub') {
    ml = item.payload.listname;
    html.inject("This is a request to unsubscribe " + item.payload.target + " from " + ml);
  }
  html.inject(new HTML('br'));
  if (item.diff && item.diff.length > 0) {
    html.inject(new HTML('pre', {}, "Changeset:\n\n" + item.diff));
    html.inject(new HTML('hr'));
  }
  if (item.por) {
    pre = new HTML('pre', {}, "Proof of Request:\n");
    por = item.por.replace(/</g, "&lt;").replace(/(https?:\/\/\S+)/g, (function(_this) {
      return function(a) {
        return "<a href='" + a + "' target='_blank'>" + a + "</a>";
      };
    })(this));
    pre.innerHTML += por;
    html.inject(pre);
  } else {
    html.inject("No Proof-of-Request provided");
  }
  html.inject(new HTML('hr'));
  if (userAccount.isRoot) {
    if (item.approved === false) {
      btn = new HTML('input', {
        onclick: "approveQueue('" + item.id + "');",
        type: 'button',
        "class": 'btn btn-success',
        value: 'Approve request'
      });
      html.inject(btn);
      btn = new HTML('input', {
        onclick: "denyQueue('" + item.id + "');",
        type: 'button',
        "class": 'btn btn-danger',
        value: 'Deny request'
      });
      html.inject(btn);
    }
    if (item.approved === true && item.completed === false) {
      btn = new HTML('input', {
        onclick: "unapproveQueue('" + item.id + "');",
        type: 'button',
        "class": 'btn btn-danger',
        value: 'Remove approval'
      });
      html.inject(btn);
    }
  }
  if (item.error) {
    if (userAccount.isRoot) {
      btn = new HTML('input', {
        onclick: "resetQueue('" + item.id + "');",
        type: 'button',
        "class": 'btn btn-warning',
        value: 'Reschedule request'
      });
      html.inject(btn);
    }
    html.inject(new HTML('pre', {}, ("This request was processed on " + item.handler + " but failed:\n") + item.error));
  }
  obj.innerHTML = "";
  return obj.inject(html);
};

queueList = function(json, state) {
  var age, item, j, len, ref, status, tbl, td, tr;
  tbl = new HTML('table', {
    "class": 'table table-striped'
  });
  if (json.queue && json.queue.length > 0) {
    json.queue.sort((function(_this) {
      return function(a, b) {
        return b.createdTime - a.createdTime;
      };
    })(this));
    tr = new HTML('tr');
    tr.inject(new HTML('th', {}, "Request ID"));
    tr.inject(new HTML('th', {}, "Request Type"));
    tr.inject(new HTML('th', {}, "Project"));
    tr.inject(new HTML('th', {}, "Requester"));
    tr.inject(new HTML('th', {}, "Time in queue"));
    tr.inject(new HTML('th', {}, "Approved"));
    tr.inject(new HTML('th', {}, "Status"));
    tbl.inject(tr);
    ref = json.queue;
    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];
      queue_items[item.id] = item;
      tr = new HTML('tr', {
        "class": 'hovertr',
        onclick: "showHideQueue('" + item.id + "')"
      });
      if (item.error) {
        tr.style.background = '#F0D0C0';
        tr.style.color = '#803000';
      }
      tr.inject(new HTML('td', {}, item.id));
      tr.inject(new HTML('td', {}, item.type));
      tr.inject(new HTML('td', {}, item.project));
      tr.inject(new HTML('td', {}, item.creator));
      age = (new Date().getTime() / 1000) - item.createdTime;
      if (age > 7200) {
        age = Math.round(age / 3600) + " hours";
      } else {
        age = Math.round(age / 60) + " minutes";
      }
      tr.inject(new HTML('td', {}, age));
      app = new HTML('span', {
        style: {
          color: item.approved === true ? 'green' : 'grey'
        }
      }, item.approved === true ? 'Approved by ' + item.approver : 'Not yet');
      tr.inject(new HTML('td', {}, app));
      status = "Pending approval";
      if (item.approved === true) {
        status = "Pending processing";
      }
      if (item.completed === true) {
        status = "Processed";
      }
      if (item.error) {
        status = "Error in processing!";
      }
      tr.inject(new HTML('td', {}, status));
      tbl.inject(tr);
      tr = new HTML('tr', {
        id: "request_" + item.id,
        style: {
          display: 'none'
        }
      });
      td = new HTML('td', {
        colspan: 7
      }, "foooo");
      tr.inject(td);
      tbl.inject(tr);
    }
  } else {
    tbl.inject(txt("No pending requests"));
  }
  return state.widget.inject(tbl, true);
};

ps_domain = '';

ps_project = '';

ps_podling = false;

ps_new = false;

saveRepository = function() {
  var payload, ps_changes, ps_commitlist, ps_issuelist, ps_jira, ps_por, ps_repo, ps_type;
  ps_repo = get('repo_name').value;
  ps_type = get('repo_type').value;
  ps_por = get('repo_por').value;
  ps_commitlist = get('repo_commitlist').value;
  ps_issuelist = get('repo_issuelist').value;
  ps_jira = get('repo_jira').value;
  ps_changes = {
    'repo': ps_repo,
    'project': ps_project,
    'type': ps_type,
    'commitlist': ps_commitlist,
    'issuelist': ps_issuelist,
    'jira': ps_jira
  };
  payload = {
    'project': ps_project,
    'por': ps_por,
    'type': 'repository',
    'payload': ps_changes
  };
  return put('queue/list/add', payload, null, sentRepository);
};

sentRepository = function(json, state) {
  return get('repo_form').innerHTML = "<h2>Your request (" + json.id + ") has been filed!</h2>";
};

switchRepoType = function(t) {
  if (t === 'gitbox') {
    get('repo_host').innerText = 'https://gitbox.apache.org/repos/asf/';
    get('repo_ext').innerText = '.git';
  }
  if (t === 'git-wip') {
    get('repo_host').innerText = 'https://git-wip-us.apache.org/repos/asf/';
    get('repo_ext').innerText = '.git';
  }
  if (t === 'svn') {
    get('repo_host').innerText = 'https://svn.apache.org/repos/asf/';
    get('repo_name').value = ps_project;
    if (ps_podling) {
      get('repo_host').innerText += "incubator/";
    }
    get('repo_ext').innerText = '';
  }
  if (t === 'svnpmc') {
    get('repo_host').innerText = 'https://svn.apache.org/repos/private/pmc/';
    if (ps_podling) {
      get('repo_host').innerText += "incubator/";
    }
    get('repo_name').value = ps_project;
    return get('repo_ext').innerText = '';
  }
};

repoEditor = function(json, state) {
  var btn, d, fooName, key, tbl, td, tr, xvalue;
  ps_new = false;
  ps_project = json.project;
  tbl = new HTML('table', {
    id: 'repo_form',
    "class": 'table table-striped'
  });
  d = new HTML('div');
  d.inject(new HTML('p', {}, "This page allows you to create or modify repositories for your project."));
  d.inject(new HTML('p', {}, "Once your request has been filed, and approved by Infrastructure, it will take approximately 30 minutes to be processed and applied."));
  state.widget.inject(d, true);
  if (!json.type) {
    d.inject(new HTML('b', {}, "There doesn't seem to be any configuration for this repository yet, but you can request a setup using the form below:"));
    ps_new = true;
    json = {
      'type': 'gitbox',
      'project': json.project,
      'domain': json.domain,
      'repository': 'foo',
      'podling': json.podling
    };
  }
  if (json.project && json.type) {
    ps_podling = json.podling;
    json.por = 'Put some reason or a vote link here';
    tr = new HTML('tr');
    tr.inject(new HTML('th', {}, "Configuration"));
    tr.inject(new HTML('th', {}, "Value"));
    tbl.inject(tr);
    key = "Project";
    tr = new HTML('tr');
    tr.inject(new HTML('td', {}, key));
    tr.inject(new HTML('td', {}, json.project));
    tbl.inject(tr);
    key = "Repository type";
    xvalue = new HTML('select', {
      onchange: 'switchRepoType(this.value);',
      id: 'repo_type'
    });
    xvalue.inject(new HTML('option', {
      value: 'gitbox',
      selected: (json.type || 'gitbox') === 'gitbox' ? 'selected' : null
    }, 'GitBox/GitHub repository'));
    xvalue.inject(new HTML('option', {
      value: 'git-wip',
      selected: (json.type || 'gitbox') === 'git-wip' ? 'selected' : null
    }, 'Legacy Git repository (git-wip-us)'));
    xvalue.inject(new HTML('option', {
      value: 'svn',
      selected: (json.type || 'gitbox') === 'svn' ? 'selected' : null
    }, 'Subversion repository'));
    xvalue.inject(new HTML('option', {
      value: 'svnpmc',
      selected: (json.type || 'gitbox') === 'svnpmc' ? 'selected' : null
    }, 'Subversion repository, PMC private'));
    tr = new HTML('tr');
    tr.inject(new HTML('td', {}, key));
    tr.inject(new HTML('td', {}, [xvalue, ' New podlings and projects migrating from svn should pick GitBox over the legacy git-wip host.']));
    tbl.inject(tr);
    fooName = "";
    if (!ps_new) {
      fooName = json.repository;
    } else {
      fooName = json.project + "-foo";
      if (json.podling) {
        fooName = "incubator-" + fooName;
      }
    }
    key = "Repository name";
    xvalue = [
      new HTML('span', {
        id: 'repo_host'
      }), new HTML('input', {
        id: 'repo_name',
        readonly: (!ps_new ? 'readonly' : null),
        type: 'text',
        value: (!ps_new ? json.repository.replace('.git', '') : fooName),
        size: 16,
        placeholder: 'foo.git'
      }), new HTML('span', {
        id: 'repo_ext'
      }, json.type !== 'svn' ? '.git' : '')
    ];
    tr = new HTML('tr');
    tr.inject(new HTML('td', {}, key));
    tr.inject(new HTML('td', {}, xvalue));
    tbl.inject(tr);
    key = "Commit list";
    fooName = "commits@" + json.domain + ".apache.org";
    xvalue = [
      new HTML('input', {
        id: 'repo_commitlist',
        type: 'text',
        value: (!ps_new && (json.commitlist && json.commitlist.length > 0) ? json.commitlist : fooName),
        size: 32,
        placeholder: 'commits@foo.apache.org'
      }), ' For subversion repositories, commit lists are hardcoded and cannot be set here.'
    ];
    tr = new HTML('tr');
    tr.inject(new HTML('td', {}, key));
    tr.inject(new HTML('td', {}, xvalue));
    tbl.inject(tr);
    key = "GitHub PR/issue notification list";
    fooName = "dev@" + json.domain + ".apache.org";
    xvalue = [
      new HTML('input', {
        id: 'repo_issuelist',
        type: 'text',
        value: (!ps_new && (json.issuelist && json.issuelist.length > 0) ? json.issuelist : fooName),
        size: 32,
        placeholder: 'commits@foo.apache.org'
      }), ' This only applies to git repositories.'
    ];
    tr = new HTML('tr');
    tr.inject(new HTML('td', {}, key));
    tr.inject(new HTML('td', {}, xvalue));
    tbl.inject(tr);
    key = "GitHub to JIRA settings";
    xvalue = new HTML('select', {
      id: 'repo_jira'
    });
    xvalue.inject(new HTML('option', {
      value: 'default',
      selected: (json.jira || 'default') === 'default' ? 'selected' : null
    }, 'Default (mirror all tickets/comments)'));
    xvalue.inject(new HTML('option', {
      value: 'worklog',
      selected: (json.jira || 'default') === 'worklog' ? 'selected' : null
    }, 'Mirror to work log'));
    xvalue.inject(new HTML('option', {
      value: 'nocomment',
      selected: (json.jira || 'default') === 'nocomment' ? 'selected' : null
    }, 'Only mirror open/close of tickets'));
    tr = new HTML('tr');
    tr.inject(new HTML('td', {}, key));
    tr.inject(new HTML('td', {}, xvalue));
    tbl.inject(tr);
    key = 'Proof-of-Request';
    xvalue = new HTML('textarea', {
      id: 'repo_por',
      style: {
        width: '400px',
        height: '120px'
      },
      placeholder: "Put a reason for the request, e.g. a link to a vote email thread or explain it's a new podling etc. This will be used to assess the validity of the request."
    });
    tr = new HTML('tr');
    tr.inject(new HTML('td', {}, key));
    tr.inject(new HTML('td', {}, xvalue));
    tbl.inject(tr);
    tr = new HTML('tr');
    td = new HTML('td', {
      colspan: 2
    });
    btn = new HTML('input', {
      type: 'button',
      "class": 'btn btn-success',
      onclick: 'saveRepository();',
      value: 'Save and request changes'
    });
    td.inject(btn);
    tr.inject(td);
    tbl.inject(tr);
  } else {
    badModal("We can't find this mailing list. Please contact infra!");
  }
  state.widget.inject(tbl);
  return switchRepoType(json.type || 'gitbox');
};
