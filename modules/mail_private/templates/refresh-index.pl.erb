#!/usr/bin/perl

#
# Script to fetch mbox files and update the mod_mbox indexes
#

use strict;

my %mbox_update_list; # directories with changes
my $prefix="<%= @archives_www %>/mod_mbox/"; # where files are stored
my $mod_mbox_util="<%= @apache2_bin %>/mod-mbox-util";
my @update_list_from_rsync; # incoming file names from rsync log

my $rsync_log = "/home/<%= @username %>/rsync.log";

# remove any old log
unlink("$rsync_log");

system ("umask u=rwx,g=rwx,o="); # TODO: does this work? Surely it has to be done before starting Perl?

system ("/usr/bin/rsync --log-file=$rsync_log -rtlzv apmail\@minotaur.apache.org::priv-mail-arch-new $prefix")
  and warn "sync failed";

system ("chmod -R 775 $prefix"); # TODO this is expensive to do every time

open(LOG, $rsync_log) || die "Error opening rsync log file: $rsync_log\n";

# Sample log entries:
#2018/03/27 16:20:02 [18360] receiving file list
#2018/03/27 16:20:04 [18361] .d..t...... apachecon-planners/
#2018/03/27 16:20:14 [18361] >f.st...... apachecon-planners/201803
#2018/03/27 16:20:15 [18361] .d..t...... board/
#2018/03/27 16:20:15 [18361] >f.st...... board/201803

while (<LOG>) {

   next unless (my $day, my $time, my $op, my $file)
      = m{^
          ( \w\w\w\s+\d+ | \d+/\d\d/\d\d ) \s+ # day (unused)
          (\d\d:\d\d:\d\d) \s+                 # time (unused)
          [^[]* \[\d+\]:? \s+                  # pid (ignored)
          (send|recv|[<>]f\S+) \s+             # op (%o or %i)
          (.*) \s+                             # file name (e.g. board/201803)
          $ }x;

   if ($op =~ /^>/) {
      $op = 'send';
      push @update_list_from_rsync,$file;
   } elsif ($op =~ /^</) {
      $op = 'recv';
   }

}
close LOG;

foreach my $file (@update_list_from_rsync) {

    (my $listdir, my $mbox) = split(/\//,$file);

    # Skip files that should not be processed
    next unless $mbox =~ m/^\d{6}(?:\.gz)?$/; # only want dddddd[.gz]

    #build a list of directories that need mboxutil run on them
    $mbox_update_list{$prefix.$listdir}++;

    #fixup $file so that it's the full path to the file
    #what we get from the rsync log is relative.
    my $fullpath = $prefix . $file;

    #Inflate leaving the original around so future rsyncs are happy.
    if ($fullpath =~ m/.+\.gz$/) {
        my $unzfile = $fullpath;
        $unzfile =~ s/\.gz$//;
        $mbox =~ s/\.gz$//;
        system("zcat $fullpath > $unzfile");
        $fullpath=$unzfile;
    }

    # Check for zero byte file that mbox-util will puke on.
    # TODO does it really object?
    # If we find one do not create the symlink to *.mbox
    my $filezise = -s $fullpath;
    my $link = $fullpath . ".mbox";
    if ($filezise > 0) {
        symlink("$fullpath","$link");
    }
    else {
        print "*** Zero Byte mailbox found: $link\n"; 
        unlink("$link");
    };

}

foreach my $key (keys %mbox_update_list) {

    print "MBOX_UTIL: indexing $key\n";
    my $timeout = 3600; #number of seconds to wait
    eval {
        local $SIG{ALRM} = sub { print "Timeout on $key\n"; next }; 
        alarm $timeout;
        system ("$mod_mbox_util -u $key");
        # TODO are these necessary? Better to run Perl with the correct umask
        system ("chmod 775 $key");
        system ("chmod -R 775 $key");
        alarm 0;
    };

}
