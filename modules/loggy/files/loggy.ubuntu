#!/bin/bash
### BEGIN INIT INFO
# Provides:          loggy
# Required-Start:    $local_fs $network
# Required-Stop:     $local_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: loggy
# Description:       start loggy daemon
#### END INIT INFO

. /lib/init/vars.sh
. /lib/lsb/init-functions

loggy_user=${loggy_user-"root"}
loggy_group=${loggy_group-"root"}
loggy_pidfile=${loggy_pidfile-"/var/run/loggy.pid"}
loggy_config=${loggy_config-"/usr/local/etc/loggy/loggy.conf"}
loggy_logfile=${loggy_logfile-"/var/log/loggy.log"}
loggy_appdir=${loggy_appdir-"/usr/local/etc/loggy"}
pidfile="${loggy_pidfile}"

RETVAL=0
 
start() {
    if [ -f $loggy_pidfile ]; then
      # pid file exists, check is proc is running
      PID=`cat $loggy_pidfile`
      if kill -0 $PID >/dev/null 2>&1; then
        echo 'loggy is already running'
        return 1
      else
        # loggy was killed but not cleaned up
        echo 'loggy was not stopped cleanly, cleaning up'
        rm -f $loggy_pidfile
      fi
    fi

    echo "Starting loggy daemon: "
    cd $loggy_appdir
    python2.7 loggy.py --daemonize --user=$loggy_user --group=$loggy_group
    RETVAL=$?
    [ $RETVAL -eq 0 ] && echo "ok" || echo "failed"
    return $RETVAL
}
 
stop() {
    echo "Stopping loggy daemon: "
    cd $loggy_appdir
    python2.7 loggy.py --stop
    RETVAL=$?
    [ $RETVAL -eq 0 ] && echo "ok" || echo "failed"
    return $RETVAL
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    status)
        PID=`cat $loggy_pidfile`
        if ps -p $PID > /dev/null
        then
            echo "Loggy is running, yay!"
            exit 0
        else
            echo "Loggy ain't running :("
            exit 3
        fi;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
esac

exit $RETVAL
